import { createClient } from '@supabase/supabase-js';

// Get Supabase configuration from environment variables
const supabaseUrl = import.meta.env.NEXT_PUBLIC_SUPABASE_URL?.trim() || '';
const supabaseAnonKey = import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.trim() || '';

// Declare variables that will be exported
let supabase: any;
let testSupabaseConnection: () => Promise<boolean>;

// Validate environment variables
if (!supabaseUrl || !supabaseAnonKey || supabaseUrl === 'https://qvjfjijwmsjrlfzmumdn.supabase.co' || supabaseAnonKey === 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF2amZqaWp3bXNqcmxmem11bWRuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1OTIyNTIsImV4cCI6MjA2NjE2ODI1Mn0.9sGLKtqcGw-boRJOPGsmnJqZqKh20NuvQutBk9TRLks' || !supabaseUrl.startsWith('https://qvjfjijwmsjrlfzmumdn.supabase.co')) {
  console.warn('Supabase not configured properly. Using fallback mode.');
  console.warn('Please update your .env file with valid Supabase credentials.');
  
  // Use dummy values to prevent URL constructor error
  const dummyUrl = 'https://dummy.supabase.co';
  const dummyKey = 'dummy-key';
  
  supabase = createClient(dummyUrl, dummyKey);
  testSupabaseConnection = async (): Promise<boolean> => {
    console.warn('Cannot test connection: Supabase not configured with valid credentials');
    return false;
  };
} else {
  // Create Supabase client with enhanced error handling
  supabase = createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    },
    global: {
      headers: {
        'X-Client-Info': 'maths-point-web-app'
      }
    }
  });

  // Test connection function
  testSupabaseConnection = async (): Promise<boolean> => {
    try {
      // Simple connection test
      const { data, error } = await supabase
        .from('announcements') 
        .select('id')
        .limit(1);
      
      if (error) {
        console.error('Supabase connection test failed:', error.message);
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Supabase connection test error:', error instanceof Error ? error.message : 'Unknown error');
      return false;
    }
  };
}

// Database types (will be auto-generated by Supabase CLI)
export interface Database {
  public: {
    Tables: {
      contact_messages: {
        Row: {
          id: string;
          first_name: string;
          last_name: string;
          email: string;
          phone: string;
          class?: string;
          message: string;
          created_at: string;
          status: 'new' | 'read' | 'replied';
        };
        Insert: {
          id?: string;
          first_name: string;
          last_name: string;
          email: string;
          phone: string;
          class?: string;
          message: string;
          created_at?: string;
          status?: 'new' | 'read' | 'replied';
        };
        Update: {
          id?: string;
          first_name?: string;
          last_name?: string;
          email?: string;
          phone?: string;
          class?: string;
          message?: string;
          created_at?: string;
          status?: 'new' | 'read' | 'replied';
        };
      };
      students: {
        Row: {
          id: string;
          student_id: string;
          student_class: string;
          email: string;
          first_name?: string;
          last_name?: string;
          phone?: string;
          enrollment_date: string;
          status: 'active' | 'inactive';
          last_login?: string;
          user_id?: string;
        };
        Insert: {
          id?: string;
          student_id: string;
          student_class: string;
          email: string;
          first_name?: string;
          last_name?: string;
          phone?: string;
          enrollment_date?: string;
          status?: 'active' | 'inactive';
          last_login?: string;
          user_id?: string;
        };
        Update: {
          id?: string;
          student_id?: string;
          student_class?: string;
          email?: string;
          first_name?: string;
          last_name?: string;
          phone?: string;
          enrollment_date?: string;
          status?: 'active' | 'inactive';
          last_login?: string;
          user_id?: string;
        };
      };
      admins: {
        Row: {
          id: string;
          email: string;
          role: 'admin' | 'teacher';
          first_name?: string;
          last_name?: string;
          last_login?: string;
          permissions: string[];
          user_id?: string;
        };
        Insert: {
          id?: string;
          email: string;
          role: 'admin' | 'teacher';
          first_name?: string;
          last_name?: string;
          last_login?: string;
          permissions: string[];
          user_id?: string;
        };
        Update: {
          id?: string;
          email?: string;
          role?: 'admin' | 'teacher';
          first_name?: string;
          last_name?: string;
          last_login?: string;
          permissions?: string[];
          user_id?: string;
        };
      };
      announcements: {
        Row: {
          id: string;
          title: string;
          content: string;
          type: 'important' | 'urgent' | 'info' | 'success';
          author: string;
          author_id: string;
          is_pinned: boolean;
          tags: string[];
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          title: string;
          content: string;
          type: 'important' | 'urgent' | 'info' | 'success';
          author: string;
          author_id: string;
          is_pinned?: boolean;
          tags?: string[];
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          title?: string;
          content?: string;
          type?: 'important' | 'urgent' | 'info' | 'success';
          author?: string;
          author_id?: string;
          is_pinned?: boolean;
          tags?: string[];
          created_at?: string;
          updated_at?: string;
        };
      };
      assignments: {
        Row: {
          id: string;
          title: string;
          description: string;
          class: string;
          due_date: string;
          created_by: string;
          pdf_url?: string;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          title: string;
          description: string;
          class: string;
          due_date: string;
          created_by: string;
          pdf_url?: string;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          title?: string;
          description?: string;
          class?: string;
          due_date?: string;
          created_by?: string;
          pdf_url?: string;
          created_at?: string;
          updated_at?: string;
        };
      };
      submissions: {
        Row: {
          id: string;
          assignment_id: string;
          student_name: string;
          student_class: string;
          file_name: string;
          file_url: string;
          file_size: number;
          file_type: string;
          submitted_at: string;
          status: 'submitted' | 'graded' | 'returned';
          grade?: number;
          feedback?: string;
          graded_by?: string;
          graded_at?: string;
        };
        Insert: {
          id?: string;
          assignment_id: string;
          student_name: string;
          student_class: string;
          file_name: string;
          file_url: string;
          file_size: number;
          file_type: string;
          submitted_at?: string;
          status?: 'submitted' | 'graded' | 'returned';
          grade?: number;
          feedback?: string;
          graded_by?: string;
          graded_at?: string;
        };
        Update: {
          id?: string;
          assignment_id?: string;
          student_name?: string;
          student_class?: string;
          file_name?: string;
          file_url?: string;
          file_size?: number;
          file_type?: string;
          submitted_at?: string;
          status?: 'submitted' | 'graded' | 'returned';
          grade?: number;
          feedback?: string;
          graded_by?: string;
          graded_at?: string;
        };
      };
      login_sessions: {
        Row: {
          id: string;
          student_name: string;
          student_class: string;
          student_email: string;
          login_time: string;
          logout_time?: string;
          session_duration?: number;
          ip_address?: string;
          user_agent?: string;
          browser_info?: string;
          device_type?: string;
          is_active: boolean;
          accessed_features: string[];
          assignments_viewed: string[];
          submissions_made: string[];
          total_time_spent?: number;
          last_activity?: string;
        };
        Insert: {
          id?: string;
          student_name: string;
          student_class: string;
          student_email: string;
          login_time?: string;
          logout_time?: string;
          session_duration?: number;
          ip_address?: string;
          user_agent?: string;
          browser_info?: string;
          device_type?: string;
          is_active?: boolean;
          accessed_features?: string[];
          assignments_viewed?: string[];
          submissions_made?: string[];
          total_time_spent?: number;
          last_activity?: string;
        };
        Update: {
          id?: string;
          student_name?: string;
          student_class?: string;
          student_email?: string;
          login_time?: string;
          logout_time?: string;
          session_duration?: number;
          ip_address?: string;
          user_agent?: string;
          browser_info?: string;
          device_type?: string;
          is_active?: boolean;
          accessed_features?: string[];
          assignments_viewed?: string[];
          submissions_made?: string[];
          total_time_spent?: number;
          last_activity?: string;
        };
      };
      user_preferences: {
        Row: {
          id: string;
          user_id: string;
          login_preferences?: any;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          user_id: string;
          login_preferences?: any;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          user_id?: string;
          login_preferences?: any;
          created_at?: string;
          updated_at?: string;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
  };
}

// Export the configured client and functions
export { supabase, testSupabaseConnection };
export default supabase;